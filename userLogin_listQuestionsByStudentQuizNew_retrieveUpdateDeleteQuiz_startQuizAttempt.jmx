<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
    </TestPlan>
    <hashTree>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="false">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list">
          <stringProp name="650663559">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|woff|woff2|svg|youtubei|pageadd|rpc)</stringProp>
          <stringProp name="-2129481891">/static</stringProp>
          <stringProp name="269654741">/youtubei</stringProp>
          <stringProp name="-905947169">sentry</stringProp>
          <stringProp name="113125">rpc</stringProp>
          <stringProp name="-803547267">pagead/</stringProp>
          <stringProp name="1507509">/log</stringProp>
        </collectionProp>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">0</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.detect_graphql_request">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">0</intProp>
        <stringProp name="ProxyControlGui.default_encoding"></stringProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name">login</stringProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
        <stringProp name="ProxyControlGui.domains">${fe_url_uat_2}</stringProp>
      </ProxyControl>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">protocol server test --&gt; http</stringProp>
          </elementProp>
          <elementProp name="base_url" elementType="Argument">
            <stringProp name="Argument.name">base_url</stringProp>
            <stringProp name="Argument.value">backend-v2.promisedland.id</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Server test cek logging (BE Team) --&gt; 108.137.124.74</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">port server test ---&gt; 8000</stringProp>
          </elementProp>
          <elementProp name="path_login" elementType="Argument">
            <stringProp name="Argument.name">path_login</stringProp>
            <stringProp name="Argument.value">/api/v2/auth/login/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_loggedinuserDetails" elementType="Argument">
            <stringProp name="Argument.name">path_loggedinuserDetails</stringProp>
            <stringProp name="Argument.value">/api/auth/loggedinuserDetailsNew/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc"></stringProp>
          </elementProp>
          <elementProp name="feurl" elementType="Argument">
            <stringProp name="Argument.name">feurl</stringProp>
            <stringProp name="Argument.value">promisedland.id</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_loggedinuserDetails_New" elementType="Argument">
            <stringProp name="Argument.name">path_loggedinuserDetails_New</stringProp>
            <stringProp name="Argument.value">/api/auth/loggedinuserDetailsNew/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">loggedinuserDetails NEW</stringProp>
          </elementProp>
          <elementProp name="path_dashboard" elementType="Argument">
            <stringProp name="Argument.name">path_dashboard</stringProp>
            <stringProp name="Argument.value">/api/auth/dashboard/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc"></stringProp>
          </elementProp>
          <elementProp name="path_dashboard_new" elementType="Argument">
            <stringProp name="Argument.name">path_dashboard_new</stringProp>
            <stringProp name="Argument.value">api/auth/dashboardnew/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Dashboard NEW</stringProp>
          </elementProp>
          <elementProp name="path_listTodayEvents" elementType="Argument">
            <stringProp name="Argument.name">path_listTodayEvents</stringProp>
            <stringProp name="Argument.value">/api/calendar/listTodayEvents/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_listUpcomingQuizzes" elementType="Argument">
            <stringProp name="Argument.name">path_listUpcomingQuizzes</stringProp>
            <stringProp name="Argument.value">/api/quiz/listUpcomingQuizzes/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_listSubjects" elementType="Argument">
            <stringProp name="Argument.name">path_listSubjects</stringProp>
            <stringProp name="Argument.value">/api/course/listSubjects/</stringProp>
            <stringProp name="Argument.desc"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_listSubjectsV2" elementType="Argument">
            <stringProp name="Argument.name">path_listSubjectsV2</stringProp>
            <stringProp name="Argument.value">/api/course/listSubjectsV2/</stringProp>
            <stringProp name="Argument.desc">added 12 nov 2024</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_listQuiz" elementType="Argument">
            <stringProp name="Argument.name">path_listQuiz</stringProp>
            <stringProp name="Argument.value">/api/quiz/listQuiz/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc"></stringProp>
          </elementProp>
          <elementProp name="path_listQuiz_New" elementType="Argument">
            <stringProp name="Argument.name">path_listQuiz_New</stringProp>
            <stringProp name="Argument.value">/api/quiz/listQuizNew/</stringProp>
            <stringProp name="Argument.desc">listQuiz New</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_listQuizV2" elementType="Argument">
            <stringProp name="Argument.name">path_listQuizV2</stringProp>
            <stringProp name="Argument.value">/api/quiz/listQuizV2/</stringProp>
            <stringProp name="Argument.desc">added 12 nov 2024</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_retrieveUpdateDeleteQuiz" elementType="Argument">
            <stringProp name="Argument.name">path_retrieveUpdateDeleteQuiz</stringProp>
            <stringProp name="Argument.value">/api/quiz/retrieveUpdateDeleteQuiz</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_listQuestionsByStudentQuiz" elementType="Argument">
            <stringProp name="Argument.name">path_listQuestionsByStudentQuiz</stringProp>
            <stringProp name="Argument.value">/api/quiz/listQuestionsByStudentQuiz/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc"></stringProp>
          </elementProp>
          <elementProp name="path_listQuestionsByStudentQuiz_New" elementType="Argument">
            <stringProp name="Argument.name">path_listQuestionsByStudentQuiz_New</stringProp>
            <stringProp name="Argument.value">/api/quiz/listQuestionsByStudentQuizNew/</stringProp>
            <stringProp name="Argument.desc">listQuestionsByStudentQuiz NEW</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_current_server_time" elementType="Argument">
            <stringProp name="Argument.name">path_current_server_time</stringProp>
            <stringProp name="Argument.value">/api/current_server_time/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_startQuizAttempt" elementType="Argument">
            <stringProp name="Argument.name">path_startQuizAttempt</stringProp>
            <stringProp name="Argument.value">/api/quiz/startQuizAttempt/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_createQuizAttempt" elementType="Argument">
            <stringProp name="Argument.name">path_createQuizAttempt</stringProp>
            <stringProp name="Argument.value">/api/quiz/createQuizAttempt/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc"></stringProp>
          </elementProp>
          <elementProp name="path_createQuizAttempt_New" elementType="Argument">
            <stringProp name="Argument.name">path_createQuizAttempt_New</stringProp>
            <stringProp name="Argument.value">/api/quiz/createQuizAttemptNew/</stringProp>
            <stringProp name="Argument.desc">createQuizAttempt NEW</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="course_id" elementType="Argument">
            <stringProp name="Argument.name">course_id</stringProp>
            <stringProp name="Argument.value">488</stringProp>
            <stringProp name="Argument.desc">Course K13 (Get isting Preloaded Subject)--&gt; 158 =  kelas 7  || 159 = kelas 8 || 160 = kelas 9</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="apache_usr" elementType="Argument">
            <stringProp name="Argument.name">apache_usr</stringProp>
            <stringProp name="Argument.value">Apache-HttpClient/4.5.13 (Java/1.8.0_252)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_schools" elementType="Argument">
            <stringProp name="Argument.name">path_schools</stringProp>
            <stringProp name="Argument.value">/api/v2/school/schools/</stringProp>
            <stringProp name="Argument.desc">School list</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_userInfo" elementType="Argument">
            <stringProp name="Argument.name">path_userInfo</stringProp>
            <stringProp name="Argument.value">/api/v2/auth/user/info/</stringProp>
            <stringProp name="Argument.desc">Pengganti detail loggedinuserDetails_New</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_courseSubject" elementType="Argument">
            <stringProp name="Argument.name">path_courseSubject</stringProp>
            <stringProp name="Argument.value">/api/v2/course/course-subjects/</stringProp>
            <stringProp name="Argument.desc">Pengganti path_listSubjectsV2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_quiz" elementType="Argument">
            <stringProp name="Argument.name">path_quiz</stringProp>
            <stringProp name="Argument.value">/api/v2/quiz/</stringProp>
            <stringProp name="Argument.desc">Pengganti path_listQuizV2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_quizRetrieve" elementType="Argument">
            <stringProp name="Argument.name">path_quizRetrieve</stringProp>
            <stringProp name="Argument.value">/api/v2/quiz/${id}/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_quizQuestions" elementType="Argument">
            <stringProp name="Argument.name">path_quizQuestions</stringProp>
            <stringProp name="Argument.value">/api/v2/quiz/questions/</stringProp>
            <stringProp name="Argument.desc">Pengganti path_listQuestionsByStudentQuiz_New</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path_quizAttempts" elementType="Argument">
            <stringProp name="Argument.name">path_quizAttempts</stringProp>
            <stringProp name="Argument.value">/api/v2/quiz/attempts/</stringProp>
            <stringProp name="Argument.desc">Pengganti path_startQuizAttempt</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">D:/Performace Testing/Portal Sekolah/PROD/test_data_loadtestps/5users_smpvpn.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames">userid,pwd</stringProp>
      </CSVDataSet>
      <hashTree/>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Batch 1 | Login to Startquizattempt" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">1</stringProp>
        <stringProp name="RampUp">15</stringProp>
        <stringProp name="Steps">0</stringProp>
        <stringProp name="Hold">1</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">S</stringProp>
        <boolProp name="same_user_on_next_iteration">true</boolProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Perfomance Testing/Terbaru/Load-Testing-V2/UserData.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">login,password,school_id</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="LOGIN" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /api/v2/school/schools/">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_schools}/?page_size=9999</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=4</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
              <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
            </CookieManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.code</stringProp>
              <stringProp name="EXPECTED_VALUE">200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /api/v2/auth/login/" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_login}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;login&quot;:&quot;${login}&quot;,&#xd;
&quot;password&quot;:&quot;${password}&quot;,&#xd;
&quot;school_id&quot; : ${school_id}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=4</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
              <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Login successful" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2062122818">Login sucessful</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="jsonExtractor_accesstoken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">accesstoken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.jwt.access</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="jsonExtractor_refresh" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">refreshtoken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.jwt.refresh</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="jsonExtractor_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              <stringProp name="TestPlan.comments">ID of user</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
              <stringProp name="RandomTimer.range">500</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="LOAD DASHBOARD PAGE" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET loggedinuserDetailsNew/" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_userInfo}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=4</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.data.username</stringProp>
              <stringProp name="EXPECTED_VALUE">${userid}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET dashboardnew/" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_dashboard_new}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/dashboard</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.code</stringProp>
              <stringProp name="EXPECTED_VALUE">200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET listTodayEvents/" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_listTodayEvents}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/dashboard</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.code</stringProp>
              <stringProp name="EXPECTED_VALUE">200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET listUpcomingQuizzes/" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_listUpcomingQuizzes}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/dashboard</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.code</stringProp>
              <stringProp name="EXPECTED_VALUE">200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer (4 sec)" enabled="false">
              <stringProp name="ConstantTimer.delay">4000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="LOAD SUBJECT LIST &amp; QUIZ LIST (V2)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET course/listSubjectsV2" enabled="true">
            <stringProp name="TestPlan.comments">course preloaded class 7 K13</stringProp>
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_courseSubject}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="course" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${course_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">course</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/assessment</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.code</stringProp>
              <stringProp name="EXPECTED_VALUE">200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET quiz/listQuizV2" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_listQuizV2}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                </elementProp>
                <elementProp name="grade" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${course_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grade</stringProp>
                </elementProp>
                <elementProp name="subject" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">subject</stringProp>
                </elementProp>
                <elementProp name="search" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">search</stringProp>
                </elementProp>
                <elementProp name="ordering" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">-created_at</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ordering</stringProp>
                </elementProp>
                <elementProp name="tab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">current</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tab</stringProp>
                </elementProp>
                <elementProp name="page_size" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">20</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">page_size</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">800</stringProp>
            </ConstantTimer>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="RandomTimer.range">2000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/assessment</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.code</stringProp>
              <stringProp name="EXPECTED_VALUE">200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="jsonExtractor(id_quiz_idx0)" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">id_quiz_idx0</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="TestPlan.comments">ambil id quiz teratas pada index pertama ( index [0] ) --&gt; Sesuaikan quiz id yg mau ditest, jika ada di index 1 pada semua skolah yg mau ditest ubah jadi 1, dst..</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="LOAD INSTRUCTION PAGE" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /api/v2/quiz/{id}/">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_quiz}/${id_quiz_idx0}/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">500</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/assessment-details/${id_quiz_idx0}</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data.id</stringProp>
              <stringProp name="EXPECTED_VALUE">${id_quiz_idx0}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET current_server_time/" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_current_server_time}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <intProp name="groupSize">0</intProp>
              <longProp name="timeoutInMs">0</longProp>
            </SyncTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/assessment-details/${id_quiz_idx0}</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.server_time</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">startTime</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.server_time</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="START QUIZ">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /api/v2/quiz/attempts/" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_quizAttempts}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;quiz&quot;: ${id_quiz_idx0},&#xd;
  &quot;start&quot;:  &quot;${startTime}&quot;,&#xd;
  &quot;device&quot;: &quot;web&quot;,&#xd;
  &quot;device_information&quot;: {&#xd;
      &quot;name&quot;: &quot;Chrome&quot;,&#xd;
      &quot;version&quot;: &quot;135.0&quot;&#xd;
      },&#xd;
  &quot;session&quot;: 1&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <intProp name="groupSize">0</intProp>
              <longProp name="timeoutInMs">0</longProp>
            </SyncTimer>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">120000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/assessment-details/${id_quiz_idx0}</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.code</stringProp>
              <stringProp name="EXPECTED_VALUE">201</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /api/v2/quiz/questions/" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_quizQuestions}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="quiz" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${id_quiz_idx0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">quiz</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/assessment-details/${id_quiz_idx0}</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[0].quiz</stringProp>
              <stringProp name="EXPECTED_VALUE">${id_quiz_idx0}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">QID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="TestPlan.comments">Extract question id semua soal pilihan ganda </stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">OPTID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[*].mcqoption_set[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="TestPlan.comments">Extract smua opstion id semua pilihan jawaban tiap soal pilihan ganda</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer (7 sec)" enabled="false">
              <stringProp name="ConstantTimer.delay">7000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor (endTime)" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.time.ZoneOffset

// Get current UTC time
def currentUtcTime = ZonedDateTime.now(ZoneOffset.UTC)

// Format the date to match &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;
def formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;)
def formattedUtcTime = currentUtcTime.format(formatter)

// Save the formatted time to a JMeter variable
vars.put(&quot;endTime&quot;, formattedUtcTime)
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="TestPlan.comments">generate current time for endTime variable for post quizattempt</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CREATE QUIZ ATTEMPT NEW" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST CreateQuizAttemptNew" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_createQuizAttempt_New}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;complete&quot;: true,&#xd;
  &quot;submitted_answers&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_1},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Your teacher said, “Good morning.” What do you say in response?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_1},&#xd;
          &quot;value&quot;: &quot;“Good afternoon.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_2},&#xd;
          &quot;value&quot;: &quot;“Good morning.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_3},&#xd;
          &quot;value&quot;: &quot;“Hello.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_4},&#xd;
          &quot;value&quot;: &quot;“Thank you.”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Good afternoon.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_2},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What can you say when you want to greet someone?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_5},&#xd;
          &quot;value&quot;: &quot;“I am really sorry.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_6},&#xd;
          &quot;value&quot;: &quot;“Thank you very much.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_7},&#xd;
          &quot;value&quot;: &quot;“No problem.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_8},&#xd;
          &quot;value&quot;: &quot;“Hello.”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Thank you very much.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_3},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Dani: “Hi, Ratna. How are you doing?”&lt;/p&gt;&lt;p&gt;Ratna: “...”&lt;/p&gt;&lt;p&gt;What is an appropriate response that Ratna can give?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_9},&#xd;
          &quot;value&quot;: &quot;“I’m great! Thanks!”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_10},&#xd;
          &quot;value&quot;: &quot;“How do you do?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_11},&#xd;
          &quot;value&quot;: &quot;“I’m reading a book.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_12},&#xd;
          &quot;value&quot;: &quot;“How are you?”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“I’m reading a book.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_4},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What can you say when you are leaving a conversation?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_13},&#xd;
          &quot;value&quot;: &quot;“What a nice day!”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_14},&#xd;
          &quot;value&quot;: &quot;“Hello!”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_15},&#xd;
          &quot;value&quot;: &quot;“See you later.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_16},&#xd;
          &quot;value&quot;: &quot;“Thank you.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Thank you.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_5},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Your friend said, “I need to go. Take care.”&lt;/p&gt;&lt;p&gt;What do you say in response?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_17},&#xd;
          &quot;value&quot;: &quot;“Okay, you too.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_18},&#xd;
          &quot;value&quot;: &quot;“Please don’t go.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_19},&#xd;
          &quot;value&quot;: &quot;“It’s all good.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_20},&#xd;
          &quot;value&quot;: &quot;“It’s nice to see you too.”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Okay, you too.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_6},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Your friend said, “Thank you for lending me your book.”&lt;/p&gt;&lt;p&gt;What do you say in response?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_21},&#xd;
          &quot;value&quot;: &quot;“It’s alright.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_22},&#xd;
          &quot;value&quot;: &quot;“Thank you.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_23},&#xd;
          &quot;value&quot;: &quot;“My pleasure.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_24},&#xd;
          &quot;value&quot;: &quot;“How nice of you.”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Thank you.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_7},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Your friend said, “I’m really sorry I accidentally broke your pen.”&lt;/p&gt;&lt;p&gt;What do you say in response?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_25},&#xd;
          &quot;value&quot;: &quot;“Don’t worry about it.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_26},&#xd;
          &quot;value&quot;: &quot;“You’re welcome.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_27},&#xd;
          &quot;value&quot;: &quot;“My pleasure.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_28},&#xd;
          &quot;value&quot;: &quot;“Thanks!”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“My pleasure.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_8},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Your friend helped you with your homework. How do you express your gratitude?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_29},&#xd;
          &quot;value&quot;: &quot;“Don’t worry about it.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_30},&#xd;
          &quot;value&quot;: &quot;“Thanks for your help.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_31},&#xd;
          &quot;value&quot;: &quot;“You’re welcome.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_32},&#xd;
          &quot;value&quot;: &quot;“I’m really glad.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“I’m really glad.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_9},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;You would like to apologize for not being able to join the study group. How do you express your apology?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_33},&#xd;
          &quot;value&quot;: &quot;“Don’t worry about it.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_34},&#xd;
          &quot;value&quot;: &quot;“Thanks for your help.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_35},&#xd;
          &quot;value&quot;: &quot;“I’m sorry that I can’t join the study group.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_36},&#xd;
          &quot;value&quot;: &quot;“I don’t feel well.”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Don’t worry about it.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_10},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;You would like to apologize for not doing your homework. How do you express your apology to the teacher?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_37},&#xd;
          &quot;value&quot;: &quot;“It’s totally fine.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_38},&#xd;
          &quot;value&quot;: &quot;“Thanks for your help.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_39},&#xd;
          &quot;value&quot;: &quot;“Don’t worry about it.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_40},&#xd;
          &quot;value&quot;: &quot;“I apologize for not doing the homework, Ma’am.”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Thanks for your help.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_11},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following expressions is commonly used to introduce yourself?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_41},&#xd;
          &quot;value&quot;: &quot;“Good morning.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_42},&#xd;
          &quot;value&quot;: &quot;“Good afternoon.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_43},&#xd;
          &quot;value&quot;: &quot;“Hello, my name is …”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_44},&#xd;
          &quot;value&quot;: &quot;“Would you like to introduce yourself?”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Hello, my name is …”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_12},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following expressions can be used to ask someone to introduce themselves?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_45},&#xd;
          &quot;value&quot;: &quot;“Good morning.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_46},&#xd;
          &quot;value&quot;: &quot;“Good afternoon.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_47},&#xd;
          &quot;value&quot;: &quot;“Hello, my name is …”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_48},&#xd;
          &quot;value&quot;: &quot;“Would you like to introduce yourself?”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Would you like to introduce yourself?”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_13},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following expressions can be used to ask for someone’s name?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_49},&#xd;
          &quot;value&quot;: &quot;“I need to know your name.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_50},&#xd;
          &quot;value&quot;: &quot;“May I know your name, please?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_51},&#xd;
          &quot;value&quot;: &quot;“Where are you from?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_52},&#xd;
          &quot;value&quot;: &quot;“What do you do?”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“I need to know your name.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_14},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following expressions can be used to ask for someone’s occupation?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_53},&#xd;
          &quot;value&quot;: &quot;“I need to know your name.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_54},&#xd;
          &quot;value&quot;: &quot;“May I know your name, please?”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_55},&#xd;
          &quot;value&quot;: &quot;“Where are you from?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_56},&#xd;
          &quot;value&quot;: &quot;“What do you do?”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“May I know your name, please?”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_15},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Ida: “Hello, Janet. I’m Ida. This is Tari, … sister.”&lt;/p&gt;&lt;p&gt;Janet: “Hello, Ida. Hello, Tari. Nice to meet you both.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_57},&#xd;
          &quot;value&quot;: &quot;mine&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_58},&#xd;
          &quot;value&quot;: &quot;me&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_59},&#xd;
          &quot;value&quot;: &quot;I&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_60},&#xd;
          &quot;value&quot;: &quot;my&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;I&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_16},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following expressions can be used to ask about someone’s hobby?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_61},&#xd;
          &quot;value&quot;: &quot;“What do you do in your free time?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_62},&#xd;
          &quot;value&quot;: &quot;“Which color do you like best?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_63},&#xd;
          &quot;value&quot;: &quot;“What do you like?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_64},&#xd;
          &quot;value&quot;: &quot;“I like reading comics.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“I like reading comics.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_17},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following expressions can be used to tell your hobby?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_65},&#xd;
          &quot;value&quot;: &quot;“What do you do in your free time?”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_66},&#xd;
          &quot;value&quot;: &quot;“Which color do you like best?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_67},&#xd;
          &quot;value&quot;: &quot;“What do you like?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_68},&#xd;
          &quot;value&quot;: &quot;“I like ...”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“What do you do in your free time?”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_18},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Dani: “Do you like playing video games?”&lt;/p&gt;&lt;p&gt;Anton: “...”&lt;/p&gt;&lt;p&gt;What is the correct expression to fill in the blanks?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_69},&#xd;
          &quot;value&quot;: &quot;I am.&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_70},&#xd;
          &quot;value&quot;: &quot;I do.&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_71},&#xd;
          &quot;value&quot;: &quot;I like.&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_72},&#xd;
          &quot;value&quot;: &quot;I am liking.&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;I do.&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_19},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;“What … your hobby?” “I enjoy swimming.”&lt;/p&gt;&lt;p&gt;What is the correct expression to fill in the blanks?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_73},&#xd;
          &quot;value&quot;: &quot;do&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_74},&#xd;
          &quot;value&quot;: &quot;does&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_75},&#xd;
          &quot;value&quot;: &quot;is&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_76},&#xd;
          &quot;value&quot;: &quot;are&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;is&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_20},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;“Janet is my friend. … hobby is swimming.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_77},&#xd;
          &quot;value&quot;: &quot;His&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_78},&#xd;
          &quot;value&quot;: &quot;Her&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_79},&#xd;
          &quot;value&quot;: &quot;Their&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_80},&#xd;
          &quot;value&quot;: &quot;Our&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Our&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_21},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What do you call your father’s brother?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_81},&#xd;
          &quot;value&quot;: &quot;Uncle&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_82},&#xd;
          &quot;value&quot;: &quot;Aunt&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_83},&#xd;
          &quot;value&quot;: &quot;Older brother&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_84},&#xd;
          &quot;value&quot;: &quot;Cousin&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Uncle&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_22},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What do you call your father’s sister?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_85},&#xd;
          &quot;value&quot;: &quot;Uncle&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_86},&#xd;
          &quot;value&quot;: &quot;Aunt&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_87},&#xd;
          &quot;value&quot;: &quot;Older brother&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_88},&#xd;
          &quot;value&quot;: &quot;Cousin&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Aunt&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_23},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What do you call your uncle’s son/daughter?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_89},&#xd;
          &quot;value&quot;: &quot;Uncle&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_90},&#xd;
          &quot;value&quot;: &quot;Aunt&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_91},&#xd;
          &quot;value&quot;: &quot;Older brother&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_92},&#xd;
          &quot;value&quot;: &quot;Cousin&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Older brother&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_24},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What do you call your mother’s sister?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_93},&#xd;
          &quot;value&quot;: &quot;Uncle&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_94},&#xd;
          &quot;value&quot;: &quot;Aunt&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_95},&#xd;
          &quot;value&quot;: &quot;Older brother&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_96},&#xd;
          &quot;value&quot;: &quot;Cousin&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Cousin&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_25},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What do you call your father’s mother?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_97},&#xd;
          &quot;value&quot;: &quot;Uncle&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_98},&#xd;
          &quot;value&quot;: &quot;Aunt&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_99},&#xd;
          &quot;value&quot;: &quot;grandmother&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_100},&#xd;
          &quot;value&quot;: &quot;grandfather&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Uncle&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_26},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following is a cardinal number?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_101},&#xd;
          &quot;value&quot;: &quot;Zero&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_102},&#xd;
          &quot;value&quot;: &quot;First&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_103},&#xd;
          &quot;value&quot;: &quot;Second&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_104},&#xd;
          &quot;value&quot;: &quot;Third&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;First&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_27},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following is an ordinal number?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_105},&#xd;
          &quot;value&quot;: &quot;Zero&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_106},&#xd;
          &quot;value&quot;: &quot;One&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_107},&#xd;
          &quot;value&quot;: &quot;Two&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_108},&#xd;
          &quot;value&quot;: &quot;Third&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Two&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_28},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which expression can be used to ask about time?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_109},&#xd;
          &quot;value&quot;: &quot;“What time?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_110},&#xd;
          &quot;value&quot;: &quot;“What time is it?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_111},&#xd;
          &quot;value&quot;: &quot;“Is it the time?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_112},&#xd;
          &quot;value&quot;: &quot;“It is 8 o’clock.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“It is 8 o’clock.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_29},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which expression can be used to tell the time?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_113},&#xd;
          &quot;value&quot;: &quot;“What time?”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_114},&#xd;
          &quot;value&quot;: &quot;“What time is it?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_115},&#xd;
          &quot;value&quot;: &quot;“Is it the time?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_116},&#xd;
          &quot;value&quot;: &quot;“It is 8 o’clock.”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“What time?”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_30},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Dina: “What time do you usually wake up, Abdul?”&lt;/p&gt;&lt;p&gt;Abdul: “...”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_117},&#xd;
          &quot;value&quot;: &quot;I usually go to school at 6 in the morning.&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_118},&#xd;
          &quot;value&quot;: &quot;It’s 6 in the morning.&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_119},&#xd;
          &quot;value&quot;: &quot;I usually wake up at 6 in the morning.&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_120},&#xd;
          &quot;value&quot;: &quot;I usually wake up early.&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;It’s 6 in the morning.&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_31},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;How do you read the ordinal number: 2nd&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_121},&#xd;
          &quot;value&quot;: &quot;Two&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_122},&#xd;
          &quot;value&quot;: &quot;Twice&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_123},&#xd;
          &quot;value&quot;: &quot;Second&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_124},&#xd;
          &quot;value&quot;: &quot;Seconth&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Second&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_32},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;How do you read the ordinal number: 43&lt;sup&gt;th&lt;/sup&gt; ?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_125},&#xd;
          &quot;value&quot;: &quot;forty three&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_126},&#xd;
          &quot;value&quot;: &quot;fourth third&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_127},&#xd;
          &quot;value&quot;: &quot;forty and third&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_128},&#xd;
          &quot;value&quot;: &quot;forty-third&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;forty-third&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_33},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;How do you read the ordinal number: 21&lt;sup&gt;st&lt;/sup&gt;?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_129},&#xd;
          &quot;value&quot;: &quot;twenty-first&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_130},&#xd;
          &quot;value&quot;: &quot;twenty one&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_131},&#xd;
          &quot;value&quot;: &quot;twentieth one&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_132},&#xd;
          &quot;value&quot;: &quot;twenty-one&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;twenty-first&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_34},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What is the ordinal number of 100?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_133},&#xd;
          &quot;value&quot;: &quot;one hundred&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_134},&#xd;
          &quot;value&quot;: &quot;one-hundredth&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_135},&#xd;
          &quot;value&quot;: &quot;onehundredth&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_136},&#xd;
          &quot;value&quot;: &quot;one-hundred&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;one-hundredth&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_35},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Toni: “What is the … thing that you do in the morning?”&lt;/p&gt;&lt;p&gt;Tina: “I usually wash my face upon waking up.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_137},&#xd;
          &quot;value&quot;: &quot;second&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_138},&#xd;
          &quot;value&quot;: &quot;first&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_139},&#xd;
          &quot;value&quot;: &quot;third&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_140},&#xd;
          &quot;value&quot;: &quot;one&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;third&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_36},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Doni: “What … is today?”&lt;/p&gt;&lt;p&gt;Tina: “Today is Friday.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_141},&#xd;
          &quot;value&quot;: &quot;day&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_142},&#xd;
          &quot;value&quot;: &quot;date&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_143},&#xd;
          &quot;value&quot;: &quot;month&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_144},&#xd;
          &quot;value&quot;: &quot;year&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;year&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_37},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Doni: “What … is it?”&lt;/p&gt;&lt;p&gt;Tina: “It’s December.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_145},&#xd;
          &quot;value&quot;: &quot;year&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_146},&#xd;
          &quot;value&quot;: &quot;day&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_147},&#xd;
          &quot;value&quot;: &quot;date&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_148},&#xd;
          &quot;value&quot;: &quot;month&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;year&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_38},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Doni: “When is your birthday?”&lt;/p&gt;&lt;p&gt;Dini: “My birthday is on …”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_149},&#xd;
          &quot;value&quot;: &quot;December 31st&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_150},&#xd;
          &quot;value&quot;: &quot;December&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_151},&#xd;
          &quot;value&quot;: &quot;2010&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_152},&#xd;
          &quot;value&quot;: &quot;December 2010&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;December&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_39},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Doni: “When is your birthday?”&lt;/p&gt;&lt;p&gt;Dini: “My birthday is in …”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_153},&#xd;
          &quot;value&quot;: &quot;December 31st&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_154},&#xd;
          &quot;value&quot;: &quot;December&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_155},&#xd;
          &quot;value&quot;: &quot;Monday&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_156},&#xd;
          &quot;value&quot;: &quot;the 31st&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Monday&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_40},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following date format is correct in American English?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_157},&#xd;
          &quot;value&quot;: &quot;January 21st, 2022&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_158},&#xd;
          &quot;value&quot;: &quot;2022, 21st January&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_159},&#xd;
          &quot;value&quot;: &quot;21 January 2022&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_160},&#xd;
          &quot;value&quot;: &quot;January 21 2022&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;January 21 2022&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_41},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following options is not an article?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_161},&#xd;
          &quot;value&quot;: &quot;on&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_162},&#xd;
          &quot;value&quot;: &quot;an&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_163},&#xd;
          &quot;value&quot;: &quot;a&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_164},&#xd;
          &quot;value&quot;: &quot;the&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;on&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_42},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Janet says, “I always clean my desk with … clean cloth.”&lt;/p&gt;&lt;p&gt;Which of the following articles should be used to fill in the blank?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_165},&#xd;
          &quot;value&quot;: &quot;a&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_166},&#xd;
          &quot;value&quot;: &quot;the&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_167},&#xd;
          &quot;value&quot;: &quot;an&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_168},&#xd;
          &quot;value&quot;: &quot;all of the above are correct&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;the&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_43},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Toni says, “Can you please pass me … red pen on your desk?”&lt;/p&gt;&lt;p&gt;Which of the following articles should be used to fill in the blank?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_169},&#xd;
          &quot;value&quot;: &quot;the&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_170},&#xd;
          &quot;value&quot;: &quot;a&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_171},&#xd;
          &quot;value&quot;: &quot;an&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_172},&#xd;
          &quot;value&quot;: &quot;all of the above are correct&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;an&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_44},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Janet says, “I received … invitation card this morning.”&lt;/p&gt;&lt;p&gt;Which of the following articles should be used to fill in the blank?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_173},&#xd;
          &quot;value&quot;: &quot;the&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_174},&#xd;
          &quot;value&quot;: &quot;a&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_175},&#xd;
          &quot;value&quot;: &quot;an&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_176},&#xd;
          &quot;value&quot;: &quot;all of the above are correct&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;all of the above are correct&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_45},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;The government is building two … across this river to facilitate commuters.&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_177},&#xd;
          &quot;value&quot;: &quot;bridge&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_178},&#xd;
          &quot;value&quot;: &quot;a bridge&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_179},&#xd;
          &quot;value&quot;: &quot;the bridge&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_180},&#xd;
          &quot;value&quot;: &quot;bridges&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;bridge&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_46},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The bank offers some … for customers who want to deposit their money.&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_181},&#xd;
          &quot;value&quot;: &quot;service&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_182},&#xd;
          &quot;value&quot;: &quot;a service&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_183},&#xd;
          &quot;value&quot;: &quot;the service&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_184},&#xd;
          &quot;value&quot;: &quot;services&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;a service&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_47},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;While Mr. Rose was away, we received several … from his clients.&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_185},&#xd;
          &quot;value&quot;: &quot;voice message&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_186},&#xd;
          &quot;value&quot;: &quot;a voice message&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_187},&#xd;
          &quot;value&quot;: &quot;the voice message&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_188},&#xd;
          &quot;value&quot;: &quot;voice messages&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;the voice message&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_48},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Mr. Doni, our Science teacher, is giving Toni an A for his essay assignment because he has never seen such … comprehensive essay answer.&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_189},&#xd;
          &quot;value&quot;: &quot;a&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_190},&#xd;
          &quot;value&quot;: &quot;an&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_191},&#xd;
          &quot;value&quot;: &quot;the&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_192},&#xd;
          &quot;value&quot;: &quot;some&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;some&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_49},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Janet: “There … two ladybugs on that leaf. Can I have one as a pet, Mom?”&lt;/p&gt;&lt;p&gt;Janet’s Mom: “No, Janet. We should let them be out in nature.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_193},&#xd;
          &quot;value&quot;: &quot;am&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_194},&#xd;
          &quot;value&quot;: &quot;are&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_195},&#xd;
          &quot;value&quot;: &quot;was&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_196},&#xd;
          &quot;value&quot;: &quot;is&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;am&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_50},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;There is … in the school’s canteen. It seems unwell, so the school staff is planning to take it to the vet.&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_197},&#xd;
          &quot;value&quot;: &quot;some kittens&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_198},&#xd;
          &quot;value&quot;: &quot;a few kittens&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_199},&#xd;
          &quot;value&quot;: &quot;kitten&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_200},&#xd;
          &quot;value&quot;: &quot;a kitten&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;a few kittens&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_51},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: false,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Doni’s Mom: “Doni, would you please be a dear and go to … to buy some milk? I need it to cook some carbonara sauce.”&lt;/p&gt;&lt;p&gt;Doni: “Sure, Mom.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_201},&#xd;
          &quot;value&quot;: &quot;the hospital&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_202},&#xd;
          &quot;value&quot;: &quot;the bank&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_203},&#xd;
          &quot;value&quot;: &quot;the supermarket&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_204},&#xd;
          &quot;value&quot;: &quot;the library&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_52},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: false,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Ida: “Doni, can you point me in the direction of …? I need to borrow a book.”&lt;/p&gt;&lt;p&gt;Doni: “Sure, Ida.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_205},&#xd;
          &quot;value&quot;: &quot;the hospital&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_206},&#xd;
          &quot;value&quot;: &quot;the bank&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_207},&#xd;
          &quot;value&quot;: &quot;the supermarket&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_208},&#xd;
          &quot;value&quot;: &quot;the library&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_53},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: false,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;There was a car accident near the school this morning, and the victim has been brought to ….&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_209},&#xd;
          &quot;value&quot;: &quot;the hospital&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_210},&#xd;
          &quot;value&quot;: &quot;the bank&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_211},&#xd;
          &quot;value&quot;: &quot;the supermarket&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_212},&#xd;
          &quot;value&quot;: &quot;the library&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_54},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: false,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Janet: “Ida, what’s the building … our school? I often see people in suits go into that building.”&lt;/p&gt;&lt;p&gt;Ida: “Oh, the building on the left of our school? It’s a corporate building.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_213},&#xd;
          &quot;value&quot;: &quot;on the right&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_214},&#xd;
          &quot;value&quot;: &quot;next to&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_215},&#xd;
          &quot;value&quot;: &quot;between&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_216},&#xd;
          &quot;value&quot;: &quot;on the corner&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_55},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: false,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Doni’s Mom: “Doni, would you please watch your younger brother for a while? I need to go to … to deposit some money.”&lt;/p&gt;&lt;p&gt;Doni: “Sure, Mom.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_217},&#xd;
          &quot;value&quot;: &quot;the hospital&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_218},&#xd;
          &quot;value&quot;: &quot;the bank&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_219},&#xd;
          &quot;value&quot;: &quot;the supermarket&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_220},&#xd;
          &quot;value&quot;: &quot;the library&quot;&#xd;
        }&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;start&quot;: &quot;${startTime}&quot;,&#xd;
  &quot;end&quot;: &quot;${endTime}&quot;,&#xd;
  &quot;total_marks&quot;: 55,&#xd;
  &quot;attempted_questions&quot;: 50,&#xd;
  &quot;total_questions&quot;: 55,&#xd;
  &quot;speed&quot;: &quot;28.57&quot;,&#xd;
  &quot;quiz&quot;: ${id_quiz_idx0}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">15000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">21216</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/assessment-details/${id_quiz_idx0}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.code</stringProp>
              <stringProp name="EXPECTED_VALUE">200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <intProp name="groupSize">0</intProp>
              <longProp name="timeoutInMs">0</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="Batch 2 | Login to Startquizattempt" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">5</stringProp>
        <stringProp name="RampUp">30</stringProp>
        <stringProp name="Steps">0</stringProp>
        <stringProp name="Hold">60</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">S</stringProp>
        <boolProp name="same_user_on_next_iteration">true</boolProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:/Performace Testing/Portal Sekolah/PROD/test_data_loadtestps/data_users_per_batch/5_user_batch_2.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">userid,pwd</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="LOGIN" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST login/" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_login}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;login&quot;:&quot;${userid}&quot;,&quot;password&quot;:&quot;${pwd}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=4</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
              <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion Login successful" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1620822993">Login successful</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="jsonExtractor_accesstoken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">accesstoken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.jwt.access</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="jsonExtractor_refresh" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">refreshtoken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.jwt.refresh</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="jsonExtractor_id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              <stringProp name="TestPlan.comments">ID of user</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">2000</stringProp>
              <stringProp name="RandomTimer.range">500</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="LOAD DASHBOARD PAGE" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET loggedinuserDetailsNew/" enabled="true">
            <stringProp name="TestPlan.comments">https://backend.portalsekolah.co.id</stringProp>
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_loggedinuserDetails_New}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=4</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data.username</stringProp>
              <stringProp name="EXPECTED_VALUE">${userid}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET dashboardnew/" enabled="true">
            <stringProp name="TestPlan.comments">https://backend.portalsekolah.co.id/api/auth/dashboard/</stringProp>
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_dashboard_new}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/dashboard</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.code</stringProp>
              <stringProp name="EXPECTED_VALUE">200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET listTodayEvents/" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_listTodayEvents}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/dashboard</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.code</stringProp>
              <stringProp name="EXPECTED_VALUE">200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET listUpcomingQuizzes/" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_listUpcomingQuizzes}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/dashboard</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.code</stringProp>
              <stringProp name="EXPECTED_VALUE">200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer (4 sec)" enabled="false">
              <stringProp name="ConstantTimer.delay">4000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="LOAD SUBJECT LIST &amp; QUIZ LIST (V2)" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET course/listSubjectsV2" enabled="true">
            <stringProp name="TestPlan.comments">course preloaded class 7 K13</stringProp>
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_listSubjectsV2}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="course" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${course_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">course</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/assessment</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.code</stringProp>
              <stringProp name="EXPECTED_VALUE">200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET quiz/listQuizV2" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_listQuizV2}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                </elementProp>
                <elementProp name="grade" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${course_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grade</stringProp>
                </elementProp>
                <elementProp name="subject" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">subject</stringProp>
                </elementProp>
                <elementProp name="search" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">search</stringProp>
                </elementProp>
                <elementProp name="ordering" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">-created_at</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ordering</stringProp>
                </elementProp>
                <elementProp name="tab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">current</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tab</stringProp>
                </elementProp>
                <elementProp name="page_size" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">20</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">page_size</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">800</stringProp>
            </ConstantTimer>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="RandomTimer.range">2000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/assessment</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.code</stringProp>
              <stringProp name="EXPECTED_VALUE">200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="jsonExtractor(id_quiz_idx0)" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">id_quiz_idx0</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="TestPlan.comments">ambil id quiz teratas pada index pertama ( index [0] ) --&gt; Sesuaikan quiz id yg mau ditest, jika ada di index 1 pada semua skolah yg mau ditest ubah jadi 1, dst..</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="LOAD INSTRUCTION PAGE" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET quiz/retrieveUpdateDeleteQuiz" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_retrieveUpdateDeleteQuiz}/${id_quiz_idx0}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">500</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/assessment-details/${id_quiz_idx0}</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data.id</stringProp>
              <stringProp name="EXPECTED_VALUE">${id_quiz_idx0}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET quiz/listQuestionsByStudentQuizNew" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_listQuestionsByStudentQuiz_New}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments">
                <elementProp name="quiz" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${id_quiz_idx0}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">quiz</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/assessment-details/${id_quiz_idx0}</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[0].quiz</stringProp>
              <stringProp name="EXPECTED_VALUE">${id_quiz_idx0}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">QID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="TestPlan.comments">Extract question id semua soal pilihan ganda </stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">OPTID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data[*].mcqoption_set[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="TestPlan.comments">Extract smua opstion id semua pilihan jawaban tiap soal pilihan ganda</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer (7 sec)" enabled="false">
              <stringProp name="ConstantTimer.delay">7000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="START QUIZ" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET current_server_time/" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_current_server_time}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <intProp name="groupSize">0</intProp>
              <longProp name="timeoutInMs">0</longProp>
            </SyncTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/assessment-details/${id_quiz_idx0}</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.server_time</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">startTime</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.server_time</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST quiz/startQuizAttempt/" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_startQuizAttempt}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;quiz&quot;: &quot;${id_quiz_idx0}&quot;,&#xd;
	&quot;device&quot;: &quot;web&quot;,&#xd;
	&quot;device_information&quot;: {&quot;name&quot;: &quot;Microsoft Edge&quot;,&quot;version&quot;: &quot;127.0.0.0&quot;},&#xd;
	&quot;start&quot;: &quot;${startTime}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <intProp name="groupSize">0</intProp>
              <longProp name="timeoutInMs">0</longProp>
            </SyncTimer>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">120000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Fe_url" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/assessment-details/${id_quiz_idx0}</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.code</stringProp>
              <stringProp name="EXPECTED_VALUE">200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor (endTime)" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.time.ZoneOffset

// Get current UTC time
def currentUtcTime = ZonedDateTime.now(ZoneOffset.UTC)

// Format the date to match &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;
def formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;&quot;)
def formattedUtcTime = currentUtcTime.format(formatter)

// Save the formatted time to a JMeter variable
vars.put(&quot;endTime&quot;, formattedUtcTime)
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="TestPlan.comments">generate current time for endTime variable for post quizattempt</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="CREATE QUIZ ATTEMPT NEW" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST CreateQuizAttemptNew" enabled="true">
            <stringProp name="HTTPSampler.domain">${base_url}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${path_createQuizAttempt_New}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;complete&quot;: true,&#xd;
  &quot;submitted_answers&quot;: [&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_1},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Your teacher said, “Good morning.” What do you say in response?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_1},&#xd;
          &quot;value&quot;: &quot;“Good afternoon.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_2},&#xd;
          &quot;value&quot;: &quot;“Good morning.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_3},&#xd;
          &quot;value&quot;: &quot;“Hello.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_4},&#xd;
          &quot;value&quot;: &quot;“Thank you.”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Good afternoon.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_2},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What can you say when you want to greet someone?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_5},&#xd;
          &quot;value&quot;: &quot;“I am really sorry.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_6},&#xd;
          &quot;value&quot;: &quot;“Thank you very much.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_7},&#xd;
          &quot;value&quot;: &quot;“No problem.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_8},&#xd;
          &quot;value&quot;: &quot;“Hello.”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Thank you very much.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_3},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Dani: “Hi, Ratna. How are you doing?”&lt;/p&gt;&lt;p&gt;Ratna: “...”&lt;/p&gt;&lt;p&gt;What is an appropriate response that Ratna can give?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_9},&#xd;
          &quot;value&quot;: &quot;“I’m great! Thanks!”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_10},&#xd;
          &quot;value&quot;: &quot;“How do you do?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_11},&#xd;
          &quot;value&quot;: &quot;“I’m reading a book.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_12},&#xd;
          &quot;value&quot;: &quot;“How are you?”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“I’m reading a book.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_4},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What can you say when you are leaving a conversation?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_13},&#xd;
          &quot;value&quot;: &quot;“What a nice day!”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_14},&#xd;
          &quot;value&quot;: &quot;“Hello!”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_15},&#xd;
          &quot;value&quot;: &quot;“See you later.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_16},&#xd;
          &quot;value&quot;: &quot;“Thank you.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Thank you.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_5},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Your friend said, “I need to go. Take care.”&lt;/p&gt;&lt;p&gt;What do you say in response?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_17},&#xd;
          &quot;value&quot;: &quot;“Okay, you too.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_18},&#xd;
          &quot;value&quot;: &quot;“Please don’t go.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_19},&#xd;
          &quot;value&quot;: &quot;“It’s all good.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_20},&#xd;
          &quot;value&quot;: &quot;“It’s nice to see you too.”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Okay, you too.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_6},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Your friend said, “Thank you for lending me your book.”&lt;/p&gt;&lt;p&gt;What do you say in response?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_21},&#xd;
          &quot;value&quot;: &quot;“It’s alright.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_22},&#xd;
          &quot;value&quot;: &quot;“Thank you.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_23},&#xd;
          &quot;value&quot;: &quot;“My pleasure.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_24},&#xd;
          &quot;value&quot;: &quot;“How nice of you.”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Thank you.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_7},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Your friend said, “I’m really sorry I accidentally broke your pen.”&lt;/p&gt;&lt;p&gt;What do you say in response?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_25},&#xd;
          &quot;value&quot;: &quot;“Don’t worry about it.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_26},&#xd;
          &quot;value&quot;: &quot;“You’re welcome.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_27},&#xd;
          &quot;value&quot;: &quot;“My pleasure.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_28},&#xd;
          &quot;value&quot;: &quot;“Thanks!”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“My pleasure.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_8},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Your friend helped you with your homework. How do you express your gratitude?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_29},&#xd;
          &quot;value&quot;: &quot;“Don’t worry about it.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_30},&#xd;
          &quot;value&quot;: &quot;“Thanks for your help.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_31},&#xd;
          &quot;value&quot;: &quot;“You’re welcome.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_32},&#xd;
          &quot;value&quot;: &quot;“I’m really glad.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“I’m really glad.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_9},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;You would like to apologize for not being able to join the study group. How do you express your apology?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_33},&#xd;
          &quot;value&quot;: &quot;“Don’t worry about it.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_34},&#xd;
          &quot;value&quot;: &quot;“Thanks for your help.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_35},&#xd;
          &quot;value&quot;: &quot;“I’m sorry that I can’t join the study group.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_36},&#xd;
          &quot;value&quot;: &quot;“I don’t feel well.”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Don’t worry about it.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_10},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;You would like to apologize for not doing your homework. How do you express your apology to the teacher?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_37},&#xd;
          &quot;value&quot;: &quot;“It’s totally fine.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_38},&#xd;
          &quot;value&quot;: &quot;“Thanks for your help.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_39},&#xd;
          &quot;value&quot;: &quot;“Don’t worry about it.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_40},&#xd;
          &quot;value&quot;: &quot;“I apologize for not doing the homework, Ma’am.”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Thanks for your help.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_11},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following expressions is commonly used to introduce yourself?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_41},&#xd;
          &quot;value&quot;: &quot;“Good morning.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_42},&#xd;
          &quot;value&quot;: &quot;“Good afternoon.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_43},&#xd;
          &quot;value&quot;: &quot;“Hello, my name is …”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_44},&#xd;
          &quot;value&quot;: &quot;“Would you like to introduce yourself?”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Hello, my name is …”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_12},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following expressions can be used to ask someone to introduce themselves?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_45},&#xd;
          &quot;value&quot;: &quot;“Good morning.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_46},&#xd;
          &quot;value&quot;: &quot;“Good afternoon.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_47},&#xd;
          &quot;value&quot;: &quot;“Hello, my name is …”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_48},&#xd;
          &quot;value&quot;: &quot;“Would you like to introduce yourself?”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“Would you like to introduce yourself?”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_13},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following expressions can be used to ask for someone’s name?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_49},&#xd;
          &quot;value&quot;: &quot;“I need to know your name.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_50},&#xd;
          &quot;value&quot;: &quot;“May I know your name, please?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_51},&#xd;
          &quot;value&quot;: &quot;“Where are you from?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_52},&#xd;
          &quot;value&quot;: &quot;“What do you do?”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“I need to know your name.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_14},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following expressions can be used to ask for someone’s occupation?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_53},&#xd;
          &quot;value&quot;: &quot;“I need to know your name.”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_54},&#xd;
          &quot;value&quot;: &quot;“May I know your name, please?”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_55},&#xd;
          &quot;value&quot;: &quot;“Where are you from?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_56},&#xd;
          &quot;value&quot;: &quot;“What do you do?”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“May I know your name, please?”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_15},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Ida: “Hello, Janet. I’m Ida. This is Tari, … sister.”&lt;/p&gt;&lt;p&gt;Janet: “Hello, Ida. Hello, Tari. Nice to meet you both.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_57},&#xd;
          &quot;value&quot;: &quot;mine&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_58},&#xd;
          &quot;value&quot;: &quot;me&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_59},&#xd;
          &quot;value&quot;: &quot;I&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_60},&#xd;
          &quot;value&quot;: &quot;my&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;I&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_16},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following expressions can be used to ask about someone’s hobby?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_61},&#xd;
          &quot;value&quot;: &quot;“What do you do in your free time?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_62},&#xd;
          &quot;value&quot;: &quot;“Which color do you like best?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_63},&#xd;
          &quot;value&quot;: &quot;“What do you like?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_64},&#xd;
          &quot;value&quot;: &quot;“I like reading comics.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“I like reading comics.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_17},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following expressions can be used to tell your hobby?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_65},&#xd;
          &quot;value&quot;: &quot;“What do you do in your free time?”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_66},&#xd;
          &quot;value&quot;: &quot;“Which color do you like best?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_67},&#xd;
          &quot;value&quot;: &quot;“What do you like?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_68},&#xd;
          &quot;value&quot;: &quot;“I like ...”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“What do you do in your free time?”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_18},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Dani: “Do you like playing video games?”&lt;/p&gt;&lt;p&gt;Anton: “...”&lt;/p&gt;&lt;p&gt;What is the correct expression to fill in the blanks?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_69},&#xd;
          &quot;value&quot;: &quot;I am.&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_70},&#xd;
          &quot;value&quot;: &quot;I do.&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_71},&#xd;
          &quot;value&quot;: &quot;I like.&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_72},&#xd;
          &quot;value&quot;: &quot;I am liking.&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;I do.&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_19},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;“What … your hobby?” “I enjoy swimming.”&lt;/p&gt;&lt;p&gt;What is the correct expression to fill in the blanks?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_73},&#xd;
          &quot;value&quot;: &quot;do&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_74},&#xd;
          &quot;value&quot;: &quot;does&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_75},&#xd;
          &quot;value&quot;: &quot;is&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_76},&#xd;
          &quot;value&quot;: &quot;are&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;is&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_20},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;“Janet is my friend. … hobby is swimming.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_77},&#xd;
          &quot;value&quot;: &quot;His&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_78},&#xd;
          &quot;value&quot;: &quot;Her&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_79},&#xd;
          &quot;value&quot;: &quot;Their&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_80},&#xd;
          &quot;value&quot;: &quot;Our&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Our&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_21},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What do you call your father’s brother?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_81},&#xd;
          &quot;value&quot;: &quot;Uncle&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_82},&#xd;
          &quot;value&quot;: &quot;Aunt&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_83},&#xd;
          &quot;value&quot;: &quot;Older brother&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_84},&#xd;
          &quot;value&quot;: &quot;Cousin&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Uncle&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_22},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What do you call your father’s sister?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_85},&#xd;
          &quot;value&quot;: &quot;Uncle&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_86},&#xd;
          &quot;value&quot;: &quot;Aunt&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_87},&#xd;
          &quot;value&quot;: &quot;Older brother&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_88},&#xd;
          &quot;value&quot;: &quot;Cousin&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Aunt&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_23},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What do you call your uncle’s son/daughter?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_89},&#xd;
          &quot;value&quot;: &quot;Uncle&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_90},&#xd;
          &quot;value&quot;: &quot;Aunt&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_91},&#xd;
          &quot;value&quot;: &quot;Older brother&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_92},&#xd;
          &quot;value&quot;: &quot;Cousin&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Older brother&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_24},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What do you call your mother’s sister?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_93},&#xd;
          &quot;value&quot;: &quot;Uncle&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_94},&#xd;
          &quot;value&quot;: &quot;Aunt&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_95},&#xd;
          &quot;value&quot;: &quot;Older brother&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_96},&#xd;
          &quot;value&quot;: &quot;Cousin&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Cousin&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_25},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What do you call your father’s mother?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_97},&#xd;
          &quot;value&quot;: &quot;Uncle&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_98},&#xd;
          &quot;value&quot;: &quot;Aunt&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_99},&#xd;
          &quot;value&quot;: &quot;grandmother&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_100},&#xd;
          &quot;value&quot;: &quot;grandfather&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Uncle&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_26},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following is a cardinal number?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_101},&#xd;
          &quot;value&quot;: &quot;Zero&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_102},&#xd;
          &quot;value&quot;: &quot;First&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_103},&#xd;
          &quot;value&quot;: &quot;Second&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_104},&#xd;
          &quot;value&quot;: &quot;Third&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;First&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_27},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following is an ordinal number?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_105},&#xd;
          &quot;value&quot;: &quot;Zero&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_106},&#xd;
          &quot;value&quot;: &quot;One&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_107},&#xd;
          &quot;value&quot;: &quot;Two&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_108},&#xd;
          &quot;value&quot;: &quot;Third&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Two&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_28},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which expression can be used to ask about time?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_109},&#xd;
          &quot;value&quot;: &quot;“What time?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_110},&#xd;
          &quot;value&quot;: &quot;“What time is it?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_111},&#xd;
          &quot;value&quot;: &quot;“Is it the time?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_112},&#xd;
          &quot;value&quot;: &quot;“It is 8 o’clock.”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“It is 8 o’clock.”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_29},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which expression can be used to tell the time?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_113},&#xd;
          &quot;value&quot;: &quot;“What time?”&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_114},&#xd;
          &quot;value&quot;: &quot;“What time is it?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_115},&#xd;
          &quot;value&quot;: &quot;“Is it the time?”&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_116},&#xd;
          &quot;value&quot;: &quot;“It is 8 o’clock.”&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;“What time?”&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_30},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Dina: “What time do you usually wake up, Abdul?”&lt;/p&gt;&lt;p&gt;Abdul: “...”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_117},&#xd;
          &quot;value&quot;: &quot;I usually go to school at 6 in the morning.&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_118},&#xd;
          &quot;value&quot;: &quot;It’s 6 in the morning.&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_119},&#xd;
          &quot;value&quot;: &quot;I usually wake up at 6 in the morning.&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_120},&#xd;
          &quot;value&quot;: &quot;I usually wake up early.&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;It’s 6 in the morning.&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_31},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;How do you read the ordinal number: 2nd&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_121},&#xd;
          &quot;value&quot;: &quot;Two&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_122},&#xd;
          &quot;value&quot;: &quot;Twice&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_123},&#xd;
          &quot;value&quot;: &quot;Second&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_124},&#xd;
          &quot;value&quot;: &quot;Seconth&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Second&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_32},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;How do you read the ordinal number: 43&lt;sup&gt;th&lt;/sup&gt; ?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_125},&#xd;
          &quot;value&quot;: &quot;forty three&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_126},&#xd;
          &quot;value&quot;: &quot;fourth third&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_127},&#xd;
          &quot;value&quot;: &quot;forty and third&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_128},&#xd;
          &quot;value&quot;: &quot;forty-third&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;forty-third&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_33},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;How do you read the ordinal number: 21&lt;sup&gt;st&lt;/sup&gt;?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_129},&#xd;
          &quot;value&quot;: &quot;twenty-first&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_130},&#xd;
          &quot;value&quot;: &quot;twenty one&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_131},&#xd;
          &quot;value&quot;: &quot;twentieth one&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_132},&#xd;
          &quot;value&quot;: &quot;twenty-one&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;twenty-first&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_34},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;What is the ordinal number of 100?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_133},&#xd;
          &quot;value&quot;: &quot;one hundred&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_134},&#xd;
          &quot;value&quot;: &quot;one-hundredth&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_135},&#xd;
          &quot;value&quot;: &quot;onehundredth&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_136},&#xd;
          &quot;value&quot;: &quot;one-hundred&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;one-hundredth&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_35},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Toni: “What is the … thing that you do in the morning?”&lt;/p&gt;&lt;p&gt;Tina: “I usually wash my face upon waking up.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_137},&#xd;
          &quot;value&quot;: &quot;second&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_138},&#xd;
          &quot;value&quot;: &quot;first&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_139},&#xd;
          &quot;value&quot;: &quot;third&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_140},&#xd;
          &quot;value&quot;: &quot;one&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;third&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_36},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Doni: “What … is today?”&lt;/p&gt;&lt;p&gt;Tina: “Today is Friday.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_141},&#xd;
          &quot;value&quot;: &quot;day&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_142},&#xd;
          &quot;value&quot;: &quot;date&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_143},&#xd;
          &quot;value&quot;: &quot;month&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_144},&#xd;
          &quot;value&quot;: &quot;year&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;year&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_37},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Doni: “What … is it?”&lt;/p&gt;&lt;p&gt;Tina: “It’s December.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_145},&#xd;
          &quot;value&quot;: &quot;year&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_146},&#xd;
          &quot;value&quot;: &quot;day&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_147},&#xd;
          &quot;value&quot;: &quot;date&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_148},&#xd;
          &quot;value&quot;: &quot;month&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;year&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_38},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Doni: “When is your birthday?”&lt;/p&gt;&lt;p&gt;Dini: “My birthday is on …”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_149},&#xd;
          &quot;value&quot;: &quot;December 31st&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_150},&#xd;
          &quot;value&quot;: &quot;December&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_151},&#xd;
          &quot;value&quot;: &quot;2010&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_152},&#xd;
          &quot;value&quot;: &quot;December 2010&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;December&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_39},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Doni: “When is your birthday?”&lt;/p&gt;&lt;p&gt;Dini: “My birthday is in …”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_153},&#xd;
          &quot;value&quot;: &quot;December 31st&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_154},&#xd;
          &quot;value&quot;: &quot;December&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_155},&#xd;
          &quot;value&quot;: &quot;Monday&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_156},&#xd;
          &quot;value&quot;: &quot;the 31st&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;Monday&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_40},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following date format is correct in American English?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_157},&#xd;
          &quot;value&quot;: &quot;January 21st, 2022&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_158},&#xd;
          &quot;value&quot;: &quot;2022, 21st January&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_159},&#xd;
          &quot;value&quot;: &quot;21 January 2022&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_160},&#xd;
          &quot;value&quot;: &quot;January 21 2022&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;January 21 2022&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_41},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Which of the following options is not an article?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_161},&#xd;
          &quot;value&quot;: &quot;on&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_162},&#xd;
          &quot;value&quot;: &quot;an&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_163},&#xd;
          &quot;value&quot;: &quot;a&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_164},&#xd;
          &quot;value&quot;: &quot;the&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;on&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_42},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Janet says, “I always clean my desk with … clean cloth.”&lt;/p&gt;&lt;p&gt;Which of the following articles should be used to fill in the blank?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_165},&#xd;
          &quot;value&quot;: &quot;a&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_166},&#xd;
          &quot;value&quot;: &quot;the&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_167},&#xd;
          &quot;value&quot;: &quot;an&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_168},&#xd;
          &quot;value&quot;: &quot;all of the above are correct&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;the&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_43},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Toni says, “Can you please pass me … red pen on your desk?”&lt;/p&gt;&lt;p&gt;Which of the following articles should be used to fill in the blank?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_169},&#xd;
          &quot;value&quot;: &quot;the&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_170},&#xd;
          &quot;value&quot;: &quot;a&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_171},&#xd;
          &quot;value&quot;: &quot;an&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_172},&#xd;
          &quot;value&quot;: &quot;all of the above are correct&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;an&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_44},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Janet says, “I received … invitation card this morning.”&lt;/p&gt;&lt;p&gt;Which of the following articles should be used to fill in the blank?&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_173},&#xd;
          &quot;value&quot;: &quot;the&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_174},&#xd;
          &quot;value&quot;: &quot;a&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_175},&#xd;
          &quot;value&quot;: &quot;an&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_176},&#xd;
          &quot;value&quot;: &quot;all of the above are correct&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;all of the above are correct&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_45},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;The government is building two … across this river to facilitate commuters.&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_177},&#xd;
          &quot;value&quot;: &quot;bridge&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_178},&#xd;
          &quot;value&quot;: &quot;a bridge&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_179},&#xd;
          &quot;value&quot;: &quot;the bridge&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_180},&#xd;
          &quot;value&quot;: &quot;bridges&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;bridge&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_46},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The bank offers some … for customers who want to deposit their money.&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_181},&#xd;
          &quot;value&quot;: &quot;service&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_182},&#xd;
          &quot;value&quot;: &quot;a service&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_183},&#xd;
          &quot;value&quot;: &quot;the service&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_184},&#xd;
          &quot;value&quot;: &quot;services&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;a service&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_47},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;While Mr. Rose was away, we received several … from his clients.&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_185},&#xd;
          &quot;value&quot;: &quot;voice message&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_186},&#xd;
          &quot;value&quot;: &quot;a voice message&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_187},&#xd;
          &quot;value&quot;: &quot;the voice message&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_188},&#xd;
          &quot;value&quot;: &quot;voice messages&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;the voice message&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_48},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Mr. Doni, our Science teacher, is giving Toni an A for his essay assignment because he has never seen such … comprehensive essay answer.&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_189},&#xd;
          &quot;value&quot;: &quot;a&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_190},&#xd;
          &quot;value&quot;: &quot;an&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_191},&#xd;
          &quot;value&quot;: &quot;the&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_192},&#xd;
          &quot;value&quot;: &quot;some&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;some&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_49},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;Janet: “There … two ladybugs on that leaf. Can I have one as a pet, Mom?”&lt;/p&gt;&lt;p&gt;Janet’s Mom: “No, Janet. We should let them be out in nature.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_193},&#xd;
          &quot;value&quot;: &quot;am&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_194},&#xd;
          &quot;value&quot;: &quot;are&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_195},&#xd;
          &quot;value&quot;: &quot;was&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_196},&#xd;
          &quot;value&quot;: &quot;is&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;am&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_50},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: true,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;There is … in the school’s canteen. It seems unwell, so the school staff is planning to take it to the vet.&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_197},&#xd;
          &quot;value&quot;: &quot;some kittens&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_198},&#xd;
          &quot;value&quot;: &quot;a few kittens&quot;,&#xd;
          &quot;userAnswer&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_199},&#xd;
          &quot;value&quot;: &quot;kitten&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_200},&#xd;
          &quot;value&quot;: &quot;a kitten&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;userAnswer&quot;: &quot;a few kittens&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_51},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: false,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Doni’s Mom: “Doni, would you please be a dear and go to … to buy some milk? I need it to cook some carbonara sauce.”&lt;/p&gt;&lt;p&gt;Doni: “Sure, Mom.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_201},&#xd;
          &quot;value&quot;: &quot;the hospital&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_202},&#xd;
          &quot;value&quot;: &quot;the bank&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_203},&#xd;
          &quot;value&quot;: &quot;the supermarket&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_204},&#xd;
          &quot;value&quot;: &quot;the library&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_52},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: false,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Ida: “Doni, can you point me in the direction of …? I need to borrow a book.”&lt;/p&gt;&lt;p&gt;Doni: “Sure, Ida.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_205},&#xd;
          &quot;value&quot;: &quot;the hospital&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_206},&#xd;
          &quot;value&quot;: &quot;the bank&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_207},&#xd;
          &quot;value&quot;: &quot;the supermarket&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_208},&#xd;
          &quot;value&quot;: &quot;the library&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_53},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: false,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;There was a car accident near the school this morning, and the victim has been brought to ….&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_209},&#xd;
          &quot;value&quot;: &quot;the hospital&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_210},&#xd;
          &quot;value&quot;: &quot;the bank&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_211},&#xd;
          &quot;value&quot;: &quot;the supermarket&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_212},&#xd;
          &quot;value&quot;: &quot;the library&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_54},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: false,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Janet: “Ida, what’s the building … our school? I often see people in suits go into that building.”&lt;/p&gt;&lt;p&gt;Ida: “Oh, the building on the left of our school? It’s a corporate building.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_213},&#xd;
          &quot;value&quot;: &quot;on the right&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_214},&#xd;
          &quot;value&quot;: &quot;next to&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_215},&#xd;
          &quot;value&quot;: &quot;between&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_216},&#xd;
          &quot;value&quot;: &quot;on the corner&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    {&#xd;
      &quot;id&quot;: ${QID_55},&#xd;
      &quot;type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;question_type&quot;: &quot;MCQ&quot;,&#xd;
      &quot;isAnswered&quot;: false,&#xd;
      &quot;marks&quot;: 1,&#xd;
      &quot;text&quot;: &quot;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Doni’s Mom: “Doni, would you please watch your younger brother for a while? I need to go to … to deposit some money.”&lt;/p&gt;&lt;p&gt;Doni: “Sure, Mom.”&lt;/p&gt;&quot;,&#xd;
      &quot;explanation&quot;: null,&#xd;
      &quot;mcqoption_set&quot;: [&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_217},&#xd;
          &quot;value&quot;: &quot;the hospital&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_218},&#xd;
          &quot;value&quot;: &quot;the bank&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_219},&#xd;
          &quot;value&quot;: &quot;the supermarket&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: ${OPTID_220},&#xd;
          &quot;value&quot;: &quot;the library&quot;&#xd;
        }&#xd;
      ]&#xd;
    }&#xd;
  ],&#xd;
  &quot;start&quot;: &quot;${startTime}&quot;,&#xd;
  &quot;end&quot;: &quot;${endTime}&quot;,&#xd;
  &quot;total_marks&quot;: 55,&#xd;
  &quot;attempted_questions&quot;: 50,&#xd;
  &quot;total_questions&quot;: 55,&#xd;
  &quot;speed&quot;: &quot;28.57&quot;,&#xd;
  &quot;quiz&quot;: ${id_quiz_idx0}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">15000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">id</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${accesstoken}</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Priority" elementType="Header">
                  <stringProp name="Header.name">Priority</stringProp>
                  <stringProp name="Header.value">u=1, i</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-site</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">21216</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Fe_url</stringProp>
                  <stringProp name="Header.value">https://murid.${feurl}/assessment-details/${id_quiz_idx0}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.code</stringProp>
              <stringProp name="EXPECTED_VALUE">200</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="true">
              <intProp name="groupSize">0</intProp>
              <longProp name="timeoutInMs">0</longProp>
            </SyncTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
